package main

import (
	"crypto/rand"
	"crypto/x509"
	"reflect"
	"testing"
)

func TestEncryptMessage(t *testing.T) {
	e := NewMessages()
	privateKeyByte := []byte{48, 130, 4, 165, 2, 1, 0, 2, 130, 1, 1, 0, 192, 70, 220, 232, 146, 255, 192, 62, 98, 74, 161, 135, 255, 16, 67, 130, 16, 147, 50, 230, 170, 44, 248, 201, 219, 116, 69, 123, 232, 228, 245, 202, 205, 183, 48, 24, 63, 72, 163, 148, 168, 150, 196, 173, 227, 145, 123, 78, 75, 33, 71, 230, 171, 225, 162, 208, 39, 15, 7, 147, 189, 216, 141, 92, 146, 250, 123, 87, 110, 153, 246, 56, 250, 183, 161, 117, 202, 67, 155, 250, 156, 235, 143, 253, 226, 107, 178, 196, 250, 216, 39, 236, 246, 124, 232, 121, 13, 172, 173, 117, 180, 168, 34, 6, 51, 149, 125, 223, 145, 32, 96, 18, 166, 195, 66, 60, 152, 164, 45, 80, 216, 10, 199, 27, 95, 209, 15, 184, 39, 167, 200, 160, 38, 251, 154, 159, 182, 235, 148, 74, 143, 155, 24, 144, 138, 170, 219, 77, 187, 173, 229, 68, 139, 169, 28, 102, 45, 106, 20, 144, 180, 228, 54, 152, 233, 1, 96, 114, 180, 13, 60, 17, 17, 85, 157, 194, 170, 255, 38, 250, 210, 241, 239, 33, 218, 10, 253, 8, 107, 158, 191, 135, 64, 228, 12, 57, 57, 255, 20, 120, 158, 34, 84, 112, 110, 89, 190, 215, 26, 175, 231, 58, 52, 233, 204, 9, 176, 133, 36, 218, 150, 222, 97, 4, 2, 198, 195, 104, 132, 24, 189, 220, 234, 196, 163, 204, 14, 125, 164, 207, 85, 212, 199, 181, 204, 186, 226, 48, 173, 7, 230, 15, 251, 116, 199, 67, 2, 3, 1, 0, 1, 2, 130, 1, 1, 0, 188, 227, 96, 149, 98, 3, 185, 90, 15, 185, 125, 98, 90, 162, 33, 143, 158, 180, 220, 166, 89, 187, 128, 84, 221, 48, 38, 42, 138, 42, 147, 132, 61, 255, 158, 81, 211, 169, 138, 121, 185, 253, 19, 14, 56, 167, 108, 217, 7, 89, 148, 134, 249, 135, 218, 40, 94, 150, 151, 60, 254, 157, 196, 145, 147, 26, 91, 29, 19, 92, 80, 212, 189, 8, 180, 167, 64, 162, 150, 146, 230, 161, 75, 125, 128, 119, 136, 209, 150, 19, 207, 117, 44, 216, 156, 144, 127, 108, 137, 163, 62, 108, 133, 176, 77, 240, 168, 13, 127, 70, 172, 218, 229, 212, 160, 55, 99, 68, 181, 247, 219, 165, 10, 224, 203, 138, 87, 195, 62, 220, 35, 129, 2, 99, 45, 206, 13, 119, 105, 199, 222, 220, 133, 9, 9, 19, 253, 162, 109, 136, 164, 156, 53, 86, 19, 177, 49, 161, 109, 5, 170, 21, 167, 101, 101, 142, 188, 116, 161, 233, 135, 86, 145, 209, 194, 128, 92, 113, 220, 8, 224, 67, 131, 249, 62, 110, 140, 180, 142, 176, 142, 154, 155, 93, 24, 28, 58, 154, 57, 207, 108, 242, 182, 207, 174, 61, 186, 82, 18, 108, 244, 205, 137, 126, 242, 138, 210, 67, 126, 116, 93, 41, 142, 253, 37, 133, 110, 190, 39, 122, 158, 158, 167, 23, 87, 230, 189, 201, 84, 2, 6, 196, 160, 203, 228, 9, 215, 57, 232, 129, 236, 160, 178, 189, 85, 97, 2, 129, 129, 0, 237, 75, 72, 79, 149, 93, 127, 119, 6, 163, 114, 22, 23, 247, 75, 170, 54, 234, 99, 7, 198, 63, 156, 234, 170, 43, 106, 111, 162, 114, 34, 35, 110, 121, 155, 143, 134, 250, 139, 23, 99, 131, 222, 138, 170, 54, 197, 236, 176, 150, 141, 124, 21, 93, 177, 71, 225, 102, 218, 240, 86, 172, 101, 195, 122, 216, 110, 14, 124, 22, 231, 232, 97, 94, 49, 97, 214, 248, 152, 248, 49, 97, 75, 87, 49, 140, 147, 79, 201, 71, 41, 209, 152, 111, 111, 232, 50, 39, 172, 218, 232, 107, 201, 52, 253, 147, 56, 237, 146, 179, 138, 127, 211, 140, 243, 148, 78, 47, 147, 168, 11, 192, 158, 195, 132, 39, 105, 9, 2, 129, 129, 0, 207, 111, 27, 212, 116, 61, 125, 112, 124, 169, 252, 13, 49, 247, 85, 142, 205, 22, 102, 237, 88, 209, 58, 59, 98, 17, 0, 249, 112, 180, 241, 189, 21, 16, 210, 213, 220, 212, 69, 107, 25, 82, 78, 18, 166, 42, 183, 7, 250, 220, 107, 26, 227, 41, 67, 96, 28, 235, 226, 101, 216, 22, 231, 62, 94, 184, 36, 102, 132, 167, 163, 59, 134, 34, 187, 184, 95, 172, 161, 146, 189, 48, 181, 225, 179, 37, 31, 207, 211, 65, 146, 129, 242, 11, 43, 50, 248, 126, 62, 58, 224, 132, 130, 58, 215, 192, 198, 25, 166, 210, 2, 39, 66, 15, 175, 123, 198, 174, 195, 24, 81, 66, 189, 181, 157, 239, 124, 235, 2, 129, 129, 0, 212, 70, 75, 74, 190, 64, 164, 221, 82, 119, 246, 128, 35, 50, 91, 98, 202, 187, 132, 153, 152, 212, 161, 72, 31, 176, 181, 7, 102, 151, 153, 72, 126, 244, 148, 159, 161, 205, 17, 142, 123, 188, 164, 225, 1, 1, 252, 175, 15, 13, 175, 69, 248, 75, 23, 99, 73, 21, 92, 248, 49, 97, 9, 172, 4, 130, 6, 122, 56, 177, 185, 5, 221, 204, 136, 122, 144, 247, 84, 200, 122, 76, 34, 60, 191, 27, 149, 80, 131, 171, 128, 146, 122, 61, 254, 43, 6, 107, 13, 171, 202, 205, 89, 114, 105, 1, 65, 164, 237, 94, 101, 160, 146, 27, 254, 110, 134, 62, 243, 101, 26, 22, 87, 48, 106, 81, 99, 25, 2, 129, 128, 31, 94, 167, 47, 198, 240, 113, 162, 236, 71, 108, 165, 182, 51, 184, 77, 163, 56, 75, 18, 131, 199, 8, 110, 104, 147, 55, 185, 129, 80, 235, 233, 243, 96, 154, 241, 218, 182, 131, 85, 1, 252, 79, 112, 68, 142, 219, 37, 42, 203, 224, 170, 173, 69, 213, 57, 152, 198, 23, 115, 221, 109, 1, 69, 142, 95, 124, 169, 192, 79, 245, 192, 143, 181, 122, 252, 20, 3, 240, 95, 87, 155, 33, 54, 99, 184, 46, 138, 104, 97, 87, 61, 173, 148, 0, 209, 113, 128, 237, 250, 75, 111, 222, 157, 245, 120, 226, 188, 136, 92, 228, 20, 121, 202, 19, 120, 189, 128, 58, 98, 216, 15, 38, 207, 107, 118, 7, 71, 2, 129, 129, 0, 198, 198, 120, 21, 123, 144, 175, 104, 61, 139, 99, 89, 247, 165, 233, 170, 197, 99, 60, 78, 239, 51, 53, 70, 108, 4, 162, 24, 53, 74, 204, 33, 102, 98, 140, 156, 233, 174, 161, 95, 110, 41, 105, 223, 186, 67, 11, 155, 84, 140, 83, 80, 16, 12, 232, 109, 7, 156, 171, 249, 18, 96, 3, 0, 124, 145, 210, 71, 197, 164, 103, 86, 25, 212, 2, 239, 122, 12, 206, 10, 237, 60, 130, 89, 211, 224, 40, 94, 240, 67, 55, 32, 83, 102, 42, 209, 130, 188, 29, 57, 2, 84, 30, 71, 37, 245, 38, 143, 164, 43, 119, 92, 46, 81, 41, 175, 103, 111, 20, 195, 171, 164, 42, 131, 190, 95, 200, 227}
	publicKeyByte := []byte{48, 130, 1, 10, 2, 130, 1, 1, 0, 192, 70, 220, 232, 146, 255, 192, 62, 98, 74, 161, 135, 255, 16, 67, 130, 16, 147, 50, 230, 170, 44, 248, 201, 219, 116, 69, 123, 232, 228, 245, 202, 205, 183, 48, 24, 63, 72, 163, 148, 168, 150, 196, 173, 227, 145, 123, 78, 75, 33, 71, 230, 171, 225, 162, 208, 39, 15, 7, 147, 189, 216, 141, 92, 146, 250, 123, 87, 110, 153, 246, 56, 250, 183, 161, 117, 202, 67, 155, 250, 156, 235, 143, 253, 226, 107, 178, 196, 250, 216, 39, 236, 246, 124, 232, 121, 13, 172, 173, 117, 180, 168, 34, 6, 51, 149, 125, 223, 145, 32, 96, 18, 166, 195, 66, 60, 152, 164, 45, 80, 216, 10, 199, 27, 95, 209, 15, 184, 39, 167, 200, 160, 38, 251, 154, 159, 182, 235, 148, 74, 143, 155, 24, 144, 138, 170, 219, 77, 187, 173, 229, 68, 139, 169, 28, 102, 45, 106, 20, 144, 180, 228, 54, 152, 233, 1, 96, 114, 180, 13, 60, 17, 17, 85, 157, 194, 170, 255, 38, 250, 210, 241, 239, 33, 218, 10, 253, 8, 107, 158, 191, 135, 64, 228, 12, 57, 57, 255, 20, 120, 158, 34, 84, 112, 110, 89, 190, 215, 26, 175, 231, 58, 52, 233, 204, 9, 176, 133, 36, 218, 150, 222, 97, 4, 2, 198, 195, 104, 132, 24, 189, 220, 234, 196, 163, 204, 14, 125, 164, 207, 85, 212, 199, 181, 204, 186, 226, 48, 173, 7, 230, 15, 251, 116, 199, 67, 2, 3, 1, 0, 1}
	privateKey, _ := x509.ParsePKCS1PrivateKey(privateKeyByte)
	publicKey, _ := x509.ParsePKCS1PublicKey(publicKeyByte)
	key := []byte{125, 108, 205, 217, 117, 220, 43, 125, 8, 231, 236, 166, 66, 244, 203, 229, 48, 16, 205, 91, 247, 53, 67, 122, 104, 4, 248, 136, 99, 106, 245, 168}
	// nonce := []byte{231, 105, 16, 98, 199, 200, 124, 56, 123, 202, 182, 101}
	messageKey := &MessageKey{ID: 0, Key: key}
	message := &MessageUnencrypted{
		ID:     0,
		Body:   &TextMessage{Body: "Test"},
		Header: Header{MessageType: 3},
	}
	encryptedMessage, err := e.EncryptMessage(*message, *messageKey, *privateKey)
	if err != nil {
		t.Error(err)
	}
	if e.VerifyMessage(rand.Reader, *publicKey, *encryptedMessage) != nil {
		t.Error(err)
	}
}

func TestDecryptMessage(t *testing.T) {
	e := NewMessages()
	privateKeyByte := []byte{48, 130, 4, 165, 2, 1, 0, 2, 130, 1, 1, 0, 192, 70, 220, 232, 146, 255, 192, 62, 98, 74, 161, 135, 255, 16, 67, 130, 16, 147, 50, 230, 170, 44, 248, 201, 219, 116, 69, 123, 232, 228, 245, 202, 205, 183, 48, 24, 63, 72, 163, 148, 168, 150, 196, 173, 227, 145, 123, 78, 75, 33, 71, 230, 171, 225, 162, 208, 39, 15, 7, 147, 189, 216, 141, 92, 146, 250, 123, 87, 110, 153, 246, 56, 250, 183, 161, 117, 202, 67, 155, 250, 156, 235, 143, 253, 226, 107, 178, 196, 250, 216, 39, 236, 246, 124, 232, 121, 13, 172, 173, 117, 180, 168, 34, 6, 51, 149, 125, 223, 145, 32, 96, 18, 166, 195, 66, 60, 152, 164, 45, 80, 216, 10, 199, 27, 95, 209, 15, 184, 39, 167, 200, 160, 38, 251, 154, 159, 182, 235, 148, 74, 143, 155, 24, 144, 138, 170, 219, 77, 187, 173, 229, 68, 139, 169, 28, 102, 45, 106, 20, 144, 180, 228, 54, 152, 233, 1, 96, 114, 180, 13, 60, 17, 17, 85, 157, 194, 170, 255, 38, 250, 210, 241, 239, 33, 218, 10, 253, 8, 107, 158, 191, 135, 64, 228, 12, 57, 57, 255, 20, 120, 158, 34, 84, 112, 110, 89, 190, 215, 26, 175, 231, 58, 52, 233, 204, 9, 176, 133, 36, 218, 150, 222, 97, 4, 2, 198, 195, 104, 132, 24, 189, 220, 234, 196, 163, 204, 14, 125, 164, 207, 85, 212, 199, 181, 204, 186, 226, 48, 173, 7, 230, 15, 251, 116, 199, 67, 2, 3, 1, 0, 1, 2, 130, 1, 1, 0, 188, 227, 96, 149, 98, 3, 185, 90, 15, 185, 125, 98, 90, 162, 33, 143, 158, 180, 220, 166, 89, 187, 128, 84, 221, 48, 38, 42, 138, 42, 147, 132, 61, 255, 158, 81, 211, 169, 138, 121, 185, 253, 19, 14, 56, 167, 108, 217, 7, 89, 148, 134, 249, 135, 218, 40, 94, 150, 151, 60, 254, 157, 196, 145, 147, 26, 91, 29, 19, 92, 80, 212, 189, 8, 180, 167, 64, 162, 150, 146, 230, 161, 75, 125, 128, 119, 136, 209, 150, 19, 207, 117, 44, 216, 156, 144, 127, 108, 137, 163, 62, 108, 133, 176, 77, 240, 168, 13, 127, 70, 172, 218, 229, 212, 160, 55, 99, 68, 181, 247, 219, 165, 10, 224, 203, 138, 87, 195, 62, 220, 35, 129, 2, 99, 45, 206, 13, 119, 105, 199, 222, 220, 133, 9, 9, 19, 253, 162, 109, 136, 164, 156, 53, 86, 19, 177, 49, 161, 109, 5, 170, 21, 167, 101, 101, 142, 188, 116, 161, 233, 135, 86, 145, 209, 194, 128, 92, 113, 220, 8, 224, 67, 131, 249, 62, 110, 140, 180, 142, 176, 142, 154, 155, 93, 24, 28, 58, 154, 57, 207, 108, 242, 182, 207, 174, 61, 186, 82, 18, 108, 244, 205, 137, 126, 242, 138, 210, 67, 126, 116, 93, 41, 142, 253, 37, 133, 110, 190, 39, 122, 158, 158, 167, 23, 87, 230, 189, 201, 84, 2, 6, 196, 160, 203, 228, 9, 215, 57, 232, 129, 236, 160, 178, 189, 85, 97, 2, 129, 129, 0, 237, 75, 72, 79, 149, 93, 127, 119, 6, 163, 114, 22, 23, 247, 75, 170, 54, 234, 99, 7, 198, 63, 156, 234, 170, 43, 106, 111, 162, 114, 34, 35, 110, 121, 155, 143, 134, 250, 139, 23, 99, 131, 222, 138, 170, 54, 197, 236, 176, 150, 141, 124, 21, 93, 177, 71, 225, 102, 218, 240, 86, 172, 101, 195, 122, 216, 110, 14, 124, 22, 231, 232, 97, 94, 49, 97, 214, 248, 152, 248, 49, 97, 75, 87, 49, 140, 147, 79, 201, 71, 41, 209, 152, 111, 111, 232, 50, 39, 172, 218, 232, 107, 201, 52, 253, 147, 56, 237, 146, 179, 138, 127, 211, 140, 243, 148, 78, 47, 147, 168, 11, 192, 158, 195, 132, 39, 105, 9, 2, 129, 129, 0, 207, 111, 27, 212, 116, 61, 125, 112, 124, 169, 252, 13, 49, 247, 85, 142, 205, 22, 102, 237, 88, 209, 58, 59, 98, 17, 0, 249, 112, 180, 241, 189, 21, 16, 210, 213, 220, 212, 69, 107, 25, 82, 78, 18, 166, 42, 183, 7, 250, 220, 107, 26, 227, 41, 67, 96, 28, 235, 226, 101, 216, 22, 231, 62, 94, 184, 36, 102, 132, 167, 163, 59, 134, 34, 187, 184, 95, 172, 161, 146, 189, 48, 181, 225, 179, 37, 31, 207, 211, 65, 146, 129, 242, 11, 43, 50, 248, 126, 62, 58, 224, 132, 130, 58, 215, 192, 198, 25, 166, 210, 2, 39, 66, 15, 175, 123, 198, 174, 195, 24, 81, 66, 189, 181, 157, 239, 124, 235, 2, 129, 129, 0, 212, 70, 75, 74, 190, 64, 164, 221, 82, 119, 246, 128, 35, 50, 91, 98, 202, 187, 132, 153, 152, 212, 161, 72, 31, 176, 181, 7, 102, 151, 153, 72, 126, 244, 148, 159, 161, 205, 17, 142, 123, 188, 164, 225, 1, 1, 252, 175, 15, 13, 175, 69, 248, 75, 23, 99, 73, 21, 92, 248, 49, 97, 9, 172, 4, 130, 6, 122, 56, 177, 185, 5, 221, 204, 136, 122, 144, 247, 84, 200, 122, 76, 34, 60, 191, 27, 149, 80, 131, 171, 128, 146, 122, 61, 254, 43, 6, 107, 13, 171, 202, 205, 89, 114, 105, 1, 65, 164, 237, 94, 101, 160, 146, 27, 254, 110, 134, 62, 243, 101, 26, 22, 87, 48, 106, 81, 99, 25, 2, 129, 128, 31, 94, 167, 47, 198, 240, 113, 162, 236, 71, 108, 165, 182, 51, 184, 77, 163, 56, 75, 18, 131, 199, 8, 110, 104, 147, 55, 185, 129, 80, 235, 233, 243, 96, 154, 241, 218, 182, 131, 85, 1, 252, 79, 112, 68, 142, 219, 37, 42, 203, 224, 170, 173, 69, 213, 57, 152, 198, 23, 115, 221, 109, 1, 69, 142, 95, 124, 169, 192, 79, 245, 192, 143, 181, 122, 252, 20, 3, 240, 95, 87, 155, 33, 54, 99, 184, 46, 138, 104, 97, 87, 61, 173, 148, 0, 209, 113, 128, 237, 250, 75, 111, 222, 157, 245, 120, 226, 188, 136, 92, 228, 20, 121, 202, 19, 120, 189, 128, 58, 98, 216, 15, 38, 207, 107, 118, 7, 71, 2, 129, 129, 0, 198, 198, 120, 21, 123, 144, 175, 104, 61, 139, 99, 89, 247, 165, 233, 170, 197, 99, 60, 78, 239, 51, 53, 70, 108, 4, 162, 24, 53, 74, 204, 33, 102, 98, 140, 156, 233, 174, 161, 95, 110, 41, 105, 223, 186, 67, 11, 155, 84, 140, 83, 80, 16, 12, 232, 109, 7, 156, 171, 249, 18, 96, 3, 0, 124, 145, 210, 71, 197, 164, 103, 86, 25, 212, 2, 239, 122, 12, 206, 10, 237, 60, 130, 89, 211, 224, 40, 94, 240, 67, 55, 32, 83, 102, 42, 209, 130, 188, 29, 57, 2, 84, 30, 71, 37, 245, 38, 143, 164, 43, 119, 92, 46, 81, 41, 175, 103, 111, 20, 195, 171, 164, 42, 131, 190, 95, 200, 227}
	publicKeyByte := []byte{48, 130, 1, 10, 2, 130, 1, 1, 0, 192, 70, 220, 232, 146, 255, 192, 62, 98, 74, 161, 135, 255, 16, 67, 130, 16, 147, 50, 230, 170, 44, 248, 201, 219, 116, 69, 123, 232, 228, 245, 202, 205, 183, 48, 24, 63, 72, 163, 148, 168, 150, 196, 173, 227, 145, 123, 78, 75, 33, 71, 230, 171, 225, 162, 208, 39, 15, 7, 147, 189, 216, 141, 92, 146, 250, 123, 87, 110, 153, 246, 56, 250, 183, 161, 117, 202, 67, 155, 250, 156, 235, 143, 253, 226, 107, 178, 196, 250, 216, 39, 236, 246, 124, 232, 121, 13, 172, 173, 117, 180, 168, 34, 6, 51, 149, 125, 223, 145, 32, 96, 18, 166, 195, 66, 60, 152, 164, 45, 80, 216, 10, 199, 27, 95, 209, 15, 184, 39, 167, 200, 160, 38, 251, 154, 159, 182, 235, 148, 74, 143, 155, 24, 144, 138, 170, 219, 77, 187, 173, 229, 68, 139, 169, 28, 102, 45, 106, 20, 144, 180, 228, 54, 152, 233, 1, 96, 114, 180, 13, 60, 17, 17, 85, 157, 194, 170, 255, 38, 250, 210, 241, 239, 33, 218, 10, 253, 8, 107, 158, 191, 135, 64, 228, 12, 57, 57, 255, 20, 120, 158, 34, 84, 112, 110, 89, 190, 215, 26, 175, 231, 58, 52, 233, 204, 9, 176, 133, 36, 218, 150, 222, 97, 4, 2, 198, 195, 104, 132, 24, 189, 220, 234, 196, 163, 204, 14, 125, 164, 207, 85, 212, 199, 181, 204, 186, 226, 48, 173, 7, 230, 15, 251, 116, 199, 67, 2, 3, 1, 0, 1}
	privateKey, _ := x509.ParsePKCS1PrivateKey(privateKeyByte)
	publicKey, _ := x509.ParsePKCS1PublicKey(publicKeyByte)
	key := []byte{125, 108, 205, 217, 117, 220, 43, 125, 8, 231, 236, 166, 66, 244, 203, 229, 48, 16, 205, 91, 247, 53, 67, 122, 104, 4, 248, 136, 99, 106, 245, 168}
	// nonce := []byte{231, 105, 16, 98, 199, 200, 124, 56, 123, 202, 182, 101}
	messageKey := &MessageKey{ID: 0, Key: key}
	messageBody := &TextMessage{Body: "Test"}
	message := &MessageUnencrypted{
		ID:     0,
		Body:   messageBody,
		Header: Header{MessageType: 3},
	}
	encryptedMessage, err := e.EncryptMessage(*message, *messageKey, *privateKey)
	if err != nil {
		t.Error(err)
	}
	if e.VerifyMessage(rand.Reader, *publicKey, *encryptedMessage) != nil {
		t.Error(err)
	}
	decryptedMessage, err := e.DecryptMessage(*encryptedMessage, *messageKey)
	if err != nil {
		t.Error(err)
	}
	if !reflect.DeepEqual(decryptedMessage.Body.(*TextMessage), messageBody) {
		t.Error(err)
	}
}

func TestSignMessage(t *testing.T) {
	e := NewMessages()
	RSATools := NewRSA()
	privateKey, _, err := RSATools.GenerateRSAKey(rand.Reader)
	if err != nil {
		t.Error(err)
	}
	message := MessageEncrypted{
		ID:     1,
		Header: []byte{231, 105, 16, 98, 199, 200, 124, 56, 123, 202, 182, 101},
		Body:   []byte{231, 105, 16, 98, 199, 200, 124, 56, 123, 202, 182, 101},
	}
	_, err = e.SignMessage(rand.Reader, *privateKey, message)
	if err != nil {
		t.Error(err)
	}
}

func BenchmarkSignMessage(b *testing.B) {
	e := NewMessages()
	RSATools := NewRSA()
	privateKey, _, err := RSATools.GenerateRSAKey(rand.Reader)
	if err != nil {
		b.Error(err)
	}
	message := MessageEncrypted{
		ID:     1,
		Header: []byte{231, 105, 16, 98, 199, 200, 124, 56, 123, 202, 182, 101},
		Body:   []byte{231, 105, 16, 98, 199, 200, 124, 56, 123, 202, 182, 101},
	}
	for i := 0; i < b.N; i++ {
		_, err = e.SignMessage(rand.Reader, *privateKey, message)
		if err != nil {
			b.Error(err)
		}
	}
}

func TestVerifyMessage(t *testing.T) {
	e := NewMessages()
	RSATools := NewRSA()
	privateKey, publicKey, err := RSATools.GenerateRSAKey(rand.Reader)
	if err != nil {
		t.Error(err)
	}
	message := MessageEncrypted{
		ID:     1,
		Header: []byte{231, 105, 16, 98, 199, 200, 124, 56, 123, 202, 182, 101},
		Body:   []byte{231, 105, 16, 98, 199, 200, 124, 56, 123, 202, 182, 101},
	}
	signedMessage, err := e.SignMessage(rand.Reader, *privateKey, message)
	if err != nil {
		t.Error(err)
	}
	err = e.VerifyMessage(rand.Reader, *publicKey, *signedMessage)
	if err != nil {
		t.Error(err)
	}
}

func BenchmarkVerifyMessage(b *testing.B) {
	e := NewMessages()
	RSATools := NewRSA()
	privateKey, publicKey, err := RSATools.GenerateRSAKey(rand.Reader)
	if err != nil {
		b.Error(err)
	}
	message := MessageEncrypted{
		ID:     1,
		Header: []byte{231, 105, 16, 98, 199, 200, 124, 56, 123, 202, 182, 101},
		Body:   []byte{231, 105, 16, 98, 199, 200, 124, 56, 123, 202, 182, 101},
	}
	signedMessage, err := e.SignMessage(rand.Reader, *privateKey, message)
	if err != nil {
		b.Error(err)
	}
	for i := 0; i < b.N; i++ {
		err = e.VerifyMessage(rand.Reader, *publicKey, *signedMessage)
		if err != nil {
			b.Error(err)
		}
	}
}
